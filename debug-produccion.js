/**
 * üîç HERRAMIENTA DE DEBUG PARA PRODUCCI√ìN
 * 
 * Esta herramienta te ayuda a diagnosticar problemas de correo en Vercel
 * cuando funciona localmente pero no en producci√≥n.
 */

// Usando fetch nativo de Node.js (disponible desde v18)

// ========================================
// CONFIGURACI√ìN
// ========================================

// URL de tu proyecto en Vercel
const VERCEL_URL = 'https://rifas-bice.vercel.app';

// Datos de prueba
const testData = {
  to: 'easyrdemo@exesoft.cl',
  subject: 'Test desde Debug Producci√≥n',
  message: 'Este es un correo de prueba desde la herramienta de debug de producci√≥n.'
};

// ========================================
// FUNCIONES DE DEBUG
// ========================================

async function testProductionEndpoint() {
  console.log('üöÄ TESTING ENDPOINT DE PRODUCCI√ìN');
  console.log('='.repeat(50));
  
  try {
    console.log(`üì° Enviando request a: ${VERCEL_URL}/api/send-email`);
    console.log('üìã Datos:', JSON.stringify(testData, null, 2));
    
    const response = await fetch(`${VERCEL_URL}/api/send-email`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });
    
    console.log(`\nüìä Status: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    console.log('üìÑ Response Body:', responseText);
    
    if (response.ok) {
      console.log('‚úÖ SUCCESS: El endpoint responde correctamente');
      try {
        const jsonResponse = JSON.parse(responseText);
        console.log('üìß Respuesta JSON:', JSON.stringify(jsonResponse, null, 2));
      } catch (e) {
        console.log('‚ö†Ô∏è  La respuesta no es JSON v√°lido');
      }
    } else {
      console.log('‚ùå ERROR: El endpoint fall√≥');
      analyzeError(response.status, responseText);
    }
    
  } catch (error) {
    console.log('üí• ERROR DE CONEXI√ìN:', error.message);
    
    if (error.code === 'ENOTFOUND') {
      console.log('üí° CAUSA: URL incorrecta o dominio no existe');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üí° CAUSA: Servidor no disponible');
    }
  }
}

function analyzeError(status, body) {
  console.log('\nüîç AN√ÅLISIS DEL ERROR:');
  
  switch (status) {
    case 404:
      console.log('üí° CAUSA: Endpoint /api/send-email no encontrado');
      console.log('üîß SOLUCI√ìN: Verifica que el archivo api/send-email.js existe');
      break;
      
    case 500:
      console.log('üí° CAUSA: Error interno del servidor');
      console.log('üîß SOLUCI√ìN: Revisa los logs de Vercel');
      if (body.includes('SMTP')) {
        console.log('üìß ESPEC√çFICO: Error relacionado con SMTP');
      }
      break;
      
    case 405:
      console.log('üí° CAUSA: M√©todo no permitido');
      console.log('üîß SOLUCI√ìN: Verifica que el endpoint acepta POST');
      break;
      
    default:
      console.log(`üí° Status ${status}: Error no com√∫n`);
  }
  
  // Buscar errores espec√≠ficos en el body
  if (body.includes('Invalid login')) {
    console.log('üîê ESPEC√çFICO: Credenciales SMTP incorrectas en Vercel');
  }
  if (body.includes('ECONNREFUSED')) {
    console.log('üåê ESPEC√çFICO: No se puede conectar al servidor SMTP');
  }
  if (body.includes('timeout')) {
    console.log('‚è±Ô∏è  ESPEC√çFICO: Timeout de conexi√≥n SMTP');
  }
}

function showVercelDebuggingSteps() {
  console.log('\nüõ†Ô∏è  PASOS PARA DEBUG EN VERCEL');
  console.log('='.repeat(50));
  
  console.log('\n1Ô∏è‚É£  REVISAR LOGS DE VERCEL:');
  console.log('   ‚Ä¢ Ve a https://vercel.com/dashboard');
  console.log('   ‚Ä¢ Selecciona tu proyecto');
  console.log('   ‚Ä¢ Ve a "Functions" ‚Üí "View Function Logs"');
  console.log('   ‚Ä¢ Busca errores en /api/send-email');
  
  console.log('\n2Ô∏è‚É£  VERIFICAR VARIABLES DE ENTORNO:');
  console.log('   ‚Ä¢ Ve a Settings ‚Üí Environment Variables');
  console.log('   ‚Ä¢ Confirma que estas variables existen:');
  const requiredVars = ['SMTP_HOST', 'SMTP_PORT', 'SMTP_USER', 'SMTP_PASS', 'FROM_EMAIL', 'FROM_NAME'];
  requiredVars.forEach(varName => {
    console.log(`     ‚úì ${varName}`);
  });
  
  console.log('\n3Ô∏è‚É£  COMANDOS DE DEBUG ADICIONALES:');
  console.log('```bash');
  console.log('# Test directo con curl');
  console.log(`curl -X POST ${VERCEL_URL}/api/send-email \\`);
  console.log('  -H "Content-Type: application/json" \\');
  console.log('  -d \'{"to": "test@example.com", "subject": "Test", "message": "Test message"}\'');
  console.log('```');
  
  console.log('\n4Ô∏è‚É£  VERIFICAR DEPLOYMENT:');
  console.log('   ‚Ä¢ Ve a "Deployments"');
  console.log('   ‚Ä¢ Confirma que el √∫ltimo deploy fue exitoso');
  console.log('   ‚Ä¢ Verifica que incluye los cambios recientes');
}

function showCommonSolutions() {
  console.log('\nüí° SOLUCIONES COMUNES');
  console.log('='.repeat(50));
  
  console.log('\nüîê Si el error es de autenticaci√≥n:');
  console.log('   1. Verifica SMTP_PASS en Vercel = r1f4s2025.@');
  console.log('   2. Confirma SMTP_USER = easyrdemo@exesoft.cl');
  console.log('   3. Redeploya despu√©s de cambiar variables');
  
  console.log('\nüåê Si el error es de conexi√≥n:');
  console.log('   1. Verifica SMTP_HOST = mail.exesoft.cl');
  console.log('   2. Confirma SMTP_PORT = 465');
  console.log('   3. Verifica que el servidor SMTP est√© disponible');
  
  console.log('\nüì¶ Si el endpoint no existe:');
  console.log('   1. Confirma que api/send-email.js est√° en el repo');
  console.log('   2. Verifica que el √∫ltimo commit incluye el archivo');
  console.log('   3. Redeploya manualmente si es necesario');
}

// ========================================
// EJECUCI√ìN PRINCIPAL
// ========================================

async function main() {
  console.log('üîç DEBUG DE PRODUCCI√ìN - SISTEMA DE CORREOS');
  console.log('='.repeat(60));
  
  console.log('\n‚ö†Ô∏è  IMPORTANTE: Actualiza VERCEL_URL en este archivo');
  console.log(`üìç URL actual: ${VERCEL_URL}`);
  
  if (VERCEL_URL.includes('tu-proyecto')) {
    console.log('\n‚ùå ERROR: Debes actualizar VERCEL_URL con tu dominio real');
    console.log('üí° Ejemplo: https://mi-proyecto.vercel.app');
    return;
  }
  
  await testProductionEndpoint();
  showVercelDebuggingSteps();
  showCommonSolutions();
  
  console.log('\nüéØ PR√ìXIMOS PASOS:');
  console.log('1. Actualiza VERCEL_URL en este archivo');
  console.log('2. Ejecuta: node debug-produccion.js');
  console.log('3. Revisa los logs de Vercel');
  console.log('4. Aplica las soluciones sugeridas');
}

// Solo ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { testProductionEndpoint, analyzeError, showVercelDebuggingSteps };